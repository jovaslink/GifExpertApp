{"version":3,"sources":["AddCategory.js","helpers/GetGif.js","GifGridItem.js","GifGrid.js","hooks/useGifFetch.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","value","setValue","onSubmit","e","preventDefault","trim","length","categories","type","onChange","target","GetGif","category","a","urlGif","encodeURI","fetch","request","json","data","gifs","map","gif","id","title","image","images","downsized","url","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","setTimeout","then","imagenes","useGifFetch","imagen","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"qMAEaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACtBC,mBAAS,IADa,mBACzCC,EADyC,KAClCC,EADkC,KAehD,OACE,0BAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAMK,OAAOC,OAAS,IACxBR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAA2BO,OACzCN,EAAS,OAMT,2BAAOO,KAAK,OAAOR,MAAOA,EAAOS,SAdX,SAACN,GACzBF,EAASE,EAAEO,OAAOV,Y,uBCNTW,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,yDACH,KAAbD,EADgB,wBAEZE,EAFY,0FAEgFC,UAChGH,GAHgB,sBAKII,MAAMF,GALV,cAKZG,EALY,gBAMKA,EAAQC,OANb,uBAMVC,EANU,EAMVA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,MAAOH,EAAII,OAAOC,UAAUC,QAXd,kBAcXR,GAdW,4CAAH,sDCENS,EAAc,SAAC,GAA0B,IAAxBN,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAGvC,OAFAK,QAAQC,IAAIR,EAAIE,EAAOD,GAGrB,yBAAKQ,UAAU,8CACb,yBAAKC,IAAKR,EAAOS,IAAKV,IACtB,2BAAIA,KCLGW,EAAU,SAAC,GAAkB,IAAhBvB,EAAe,EAAfA,SAAe,ECAd,SAACA,GAAc,IAAD,EACbb,mBAAS,CACjCoB,KAAM,GACNiB,SAAS,IAH4B,mBAChCC,EADgC,KACzBC,EADyB,KAiBvC,OAXAC,qBAAU,WACRC,YAAW,WACT7B,EAAOC,GAAU6B,MAAK,SAACC,GACrBJ,EAAS,CACPnB,KAAMuB,EACNN,SAAS,SAGZ,QACF,CAACxB,IAEGyB,EDhB6BM,CAAY/B,GAAlC8B,EADyB,EAC/BvB,KAAgBiB,EADe,EACfA,QAExB,OACE,oCACE,4BAAKxB,GACJwB,GACC,uBAAGJ,UAAU,0CAAb,eAGF,yBAAKA,UAAU,qDACZU,EAASrB,KAAI,SAACuB,GACb,OAAO,kBAAC,EAAD,eAAaC,IAAKD,EAAOrB,IAAQqB,UEXrCE,EAAe,WAAO,IAAD,EACI/C,mBAAS,CAAC,mBADd,mBACzBQ,EADyB,KACbT,EADa,KAQhC,OACE,oCACE,4CAEA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACCS,EAAWc,KAAI,SAACT,GAAD,OACd,kBAAC,EAAD,CAASiC,IAAKjC,EAAUA,SAAUA,S,MCd1CmC,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.dd9f1337.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nexport const AddCategory = ({ setCategories }) => {\n  const [value, setValue] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (value.trim().length > 2) {\n      setCategories((categories) => [value, ...categories]);\n      setValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={value} onChange={handleInputChange}></input>\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n","export const GetGif = async (category) => {\n  if (category !== \"\") {\n    const urlGif = `https://api.giphy.com/v1/gifs/search?api_key=syIIPWyYNfsw59c4yWBlOcl97LnfpLCe&q=${encodeURI(\n      category\n    )}&limit=10`;\n    const request = await fetch(urlGif);\n    const { data } = await request.json();\n    const gifs = data.map((gif) => {\n      return {\n        id: gif.id,\n        title: gif.title,\n        image: gif.images.downsized.url,\n      };\n    });\n    return gifs;\n  }\n};\n","import React from \"react\";\n\nexport const GifGridItem = ({ id, title, image }) => {\n  console.log(id, image, title);\n\n  return (\n    <div className=\"card animate__animated animate__zoomInDown\">\n      <img src={image} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useGifFetch } from \"./hooks/useGifFetch\";\nimport { GifGridItem } from \"./GifGridItem\";\nexport const GifGrid = ({ category }) => {\n  const { data: imagenes, loading } = useGifFetch(category);\n\n  return (\n    <>\n      <h2>{category}</h2>\n      {loading && (\n        <p className=\"animate__animated animate__slideInLeft\">Cargando...</p>\n      )}\n\n      <div className=\"card-grid animate__animated animate__bounceInDown\">\n        {imagenes.map((imagen) => {\n          return <GifGridItem key={imagen.id} {...imagen} />;\n        })}\n      </div>\n    </>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { GetGif } from \"../helpers/GetGif\";\n\nexport const useGifFetch = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    setTimeout(() => {\n      GetGif(category).then((imagenes) => {\n        setState({\n          data: imagenes,\n          loading: false,\n        });\n      });\n    }, 1500);\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\nimport { AddCategory } from \"./AddCategory\";\nimport { GifGrid } from \"./GifGrid\";\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"Rick and Morty\"]);\n\n  /* const handleAdd = () => {\n    setCategories([...categories, \"Superman\"]);\n  };\n */\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n\n      <AddCategory setCategories={setCategories}></AddCategory>\n      <hr />\n      {categories.map((category) => (\n        <GifGrid key={category} category={category} />\n      ))}\n    </>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GifExpertApp } from \"./GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}